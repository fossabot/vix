#pragma once
#include <macros.h>
#include <types.h>

#include <kprintf.h>

namespace std {
    template <class T> class forward_list {
    public:
        // Returns number of elements in linked list.
        size_t size() {
            struct list_node *c = first;
            size_t n = 0;
            while (c != nullptr) {
                c = c->next;
                n++;
            }
            return n;
        }

        // Adds the element to the front.
        void push_front(const T &e) {
            struct list_node *le = new struct list_node;
            le->data = e;
            le->next = first;
            first = le;
            if (last == nullptr) {
                last = first;
            }
        }

        // Returns reference to first element. UB when empty.
        T &front() {
            return first->data;
        }

        // Returns reference to last element. UB when empty.
        T &back() {
            return last->data;
        }

        // Swaps the first element with the last one. Returns first (prior to swapping) element. UB when empty.
        T &swap_first_last() {
            if (unlikely(first->next == nullptr)) {
                return first->data;
            }
            T *d = &first->data;
            last->next = first;
            last = first;
            first = first->next;
            last->next = nullptr;
            return *d;
        }

        // Removes first element that matches
        void erase_first_if(bool (*match)(const T &)) {
            struct list_node *c = first;
            struct list_node *prev = nullptr;
            while (c != nullptr) {
                if (match(c->data)) {
                    if (prev != nullptr) {
                        prev->next = c->next;
                    }
                    if (c == first) {
                        first = c->next;
                    }
                    if (c == last) {
                        last = prev;
                    }
                    delete c;
                    break;
                }
                prev = c;
                c = c->next;
            }
        }

    private:
        struct list_node {
            T data;
            struct list_node *next;
        };

        struct list_node *first = nullptr;
        struct list_node *last = nullptr;
    };

}
