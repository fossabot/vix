#pragma once
#include <debug.h>
#include <libcxx/pnew.h>
#include <mm/kheap.h>
#include <string.h>
#include <vector>

namespace std {
    class string {
    public:
        string() {}

        string(const string &obj) {
            operator=(obj);
        }

        string(const char *s) {
            operator=(s);
        }

        string(const char *s, size_t n) {
            assureSize(n);
            memcpy(&_data[0], s, n);
        }

        ~string() {
            _data.clear();
        }

        char &operator[](size_t i) {
            assertm(i < _size, "out of bounds string access");
            return _data[i];
        }

        bool operator==(const string &str) {
            if (str._size != _size) {
                return false;
            }
            for (size_t i = 0; i < _size; i++) {
                if (str._data[i] != _data[i]) {
                    return false;
                }
            }
            return true;
        }

        bool operator!=(const string &str) {
            return !operator==(str);
        }

        string &operator=(const string &str) {
            assureSize(str._size);
            if (_size != 0) {
                memcpy(&_data[0], &str._data[0], str._size);
            }
            return *this;
        }

        string &operator=(const char *s) {
            size_t len = strlen(s);
            assureSize(len);
            if (_size != 0) {
                memcpy(&_data[0], s, len);
            }
            return *this;
        }

        string &operator=(char c) {
            assureSize(1);
            _data[0] = c;
            return *this;
        }

        string &operator+=(const string &str) {
            append(str);
            return *this;
        }

        string &operator+=(const char *s) {
            append(s);
            return *this;
        }

        string &operator+=(char c) {
            push_back(c);
            return *this;
        }

        string &append(const string &str) {
            assureSize(_size + str._size);
            memcpy(&_data[_size - str._size], &str._data[0], str._size);
            return *this;
        }

        string &append(const char *s) {
            size_t len = strlen(s);
            assureSize(_size + len);
            memcpy(&_data[_size - len], s, len);
            return *this;
        }

        string &append(const char *s, size_t n) {
            assureSize(_size + n);
            memcpy(&_data[_size - n], s, n);
            return *this;
        }

        const char *c_str() {
            if (_data.size() <= _size) {
                _data.resize(_size + 1);
            }
            _data[_size] = '\0';
            return &_data[0];
        }

        size_t capacity() {
            return _data.size();
        }

        size_t size() {
            return _size;
        }

        void resize(size_t n) {
            _size = n;
            _data.resize(_size);
        }

        void reserve(size_t n) {
            if (n > _data.capacity()) {
                _data.reserve(n);
            }
        }

        void shrink_to_fit() {
            _data.shrink_to_fit();
        }

        void push_back(char c) {
            assureSize(_size + 1);
            _data[_size - 1] = c;
        }

        void pop_back() {
            if (_size > 0) {
                _data.pop_back();
            }
        }

        void clear() {
            _size = 0;
            _data.clear();
        }

    private:
        size_t _size = 0;

        void assureSize(size_t n) {
            _size = n;
            if (_size != _data.size()) {
                _data.resize(_size);
            }
        }

        std::vector<char> _data;
    };
}

std::string operator+(const std::string &lhs, const std::string &rhs);

std::string operator+(const std::string &lhs, const char *rhs);

std::string operator+(const char *lhs, const std::string &rhs);

std::string operator+(const std::string &lhs, char rhs);

std::string operator+(char lhs, const std::string &rhs);
