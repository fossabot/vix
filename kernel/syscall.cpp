#include "syscall.h"
#include "../config.h"
#include "debug.h"
#include "multitasking.h"
#include "syscalls.h"

/* syscall arguments correspond to registers eax, ebx, ecx, edx, esi, edi and ebp */

uint32_t (*syscall_table[385])(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t) = {
    0,
    &sys_exit,
    &sys_fork,
    &sys_read,
    &sys_write, /* 4   */
    0,
    0,
    &sys_waitpid,
    0,
    0, /* 9  */
    0,
    &sys_execve,
    0,
    0,
    0, /* 14  */
    0,
    0,
    0,
    0,
    0, /* 19  */
    0,
    0,
    0,
    0,
    0, /* 24  */
    0,
    0,
    0,
    0,
    0, /* 29  */
    0,
    0,
    0,
    0,
    0, /* 34  */
    0,
    0,
    0,
    0,
    0, /* 39  */
    0,
    0,
    0,
    0,
    0, /* 44  */
    0,
    0,
    0,
    0,
    0, /* 49  */
    0,
    0,
    0,
    0,
    0, /* 54  */
    0,
    0,
    0,
    0,
    0, /* 59  */
    0,
    0,
    0,
    0,
    0, /* 64  */
    0,
    0,
    0,
    0,
    0, /* 69  */
    0,
    0,
    0,
    0,
    0, /* 74  */
    0,
    0,
    0,
    0,
    0, /* 79  */
    0,
    0,
    0,
    0,
    0, /* 84  */
    0,
    0,
    0,
    0,
    0, /* 89  */
    &sys_mmap,
    0,
    0,
    0,
    0, /* 94  */
    0,
    0,
    0,
    0,
    0, /* 99 */
    0,
    0,
    0,
    0,
    0, /* 104 */
    0,
    0,
    0,
    0,
    0, /* 109 */
    0,
    0,
    0,
    0,
    0, /* 114 */
    0,
    0,
    0,
    0,
    0, /* 119 */
    0,
    0,
    0,
    0,
    0, /* 124 */
    0,
    0,
    0,
    0,
    0, /* 129 */
    0,
    0,
    0,
    0,
    0, /* 134 */
    0,
    0,
    0,
    0,
    0, /* 139 */
    0,
    0,
    0,
    0,
    0, /* 144 */
    0,
    0,
    0,
    0,
    0, /* 149 */
    0,
    0,
    0,
    0,
    0, /* 154 */
    0,
    0,
    0,
    0,
    0, /* 159 */
    0,
    0,
    0,
    0,
    0, /* 164 */
    0,
    0,
    0,
    0,
    0, /* 169 */
    0,
    0,
    0,
    0,
    0, /* 174 */
    0,
    0,
    0,
    0,
    0, /* 179 */
    0,
    0,
    0,
    0,
    0, /* 184 */
    0,
    0,
    0,
    0,
    0, /* 189 */
    0,
    0,
    0,
    0,
    0, /* 194 */
    &sys_stat64,
    0,
    0,
    0,
    &sys_getuid32, /* 199 */
    0,
    0,
    0,
    0,
    0, /* 204 */
    0,
    0,
    0,
    0,
    0, /* 209 */
    0,
    0,
    0,
    0,
    0, /* 214 */
    0,
    0,
    0,
    0,
    0, /* 219 */
    0,
    0,
    0,
    0,
    0, /* 224 */
    0,
    0,
    0,
    0,
    0, /* 229 */
    0,
    0,
    0,
    0,
    0, /* 234 */
    0,
    0,
    0,
    0,
    0, /* 239 */
    0,
    0,
    0,
    0,
    0, /* 244 */
    0,
    0,
    0,
    0,
    0, /* 249 */
    0,
    0,
    0,
    0,
    0, /* 254 */
    0,
    0,
    0,
    0,
    0, /* 259 */
    0,
    0,
    0,
    0,
    0, /* 264 */
    0,
    0,
    0,
    0,
    0, /* 269 */
    0,
    0,
    0,
    0,
    0, /* 274 */
    0,
    0,
    0,
    0,
    0, /* 279 */
    0,
    0,
    0,
    0,
    0, /* 284 */
    0,
    0,
    0,
    0,
    0, /* 289 */
    0,
    0,
    0,
    0,
    0, /* 294 */
    0,
    0,
    0,
    0,
    0, /* 299 */
    0,
    0,
    0,
    0,
    0, /* 304 */
    0,
    0,
    0,
    0,
    0, /* 309 */
    0,
    0,
    0,
    0,
    0, /* 314 */
    0,
    0,
    0,
    0,
    0, /* 319 */
    0,
    0,
    0,
    0,
    0, /* 324 */
    0,
    0,
    0,
    0,
    0, /* 329 */
    0,
    0,
    0,
    0,
    0, /* 334 */
    0,
    0,
    0,
    0,
    0, /* 339 */
    0,
    0,
    0,
    0,
    0, /* 344 */
    0,
    0,
    0,
    0,
    0, /* 349 */
    0,
    0,
    0,
    0,
    0, /* 354 */
    0,
    0,
    0,
    0,
    0, /* 359 */
    0,
    0,
    0,
    0,
    0, /* 364 */
    0,
    0,
    0,
    0,
    0, /* 369 */
    0,
    0,
    0,
    0,
    0, /* 374 */
    0,
    0,
    0,
    0,
    0, /* 379 */
    0,
    0,
    0,
    0,
    0, /* 384 */
};

void syscall::syscallHandler(isr::Registers *regs) {
    multitasking::context *current_context = (multitasking::context *)(KERNEL_VIRT_ADDRESS + REGISTER_STORE_OFFSET);

    if (syscall_table[regs->eax] == nullptr) {
        DEBUG_PRINTF("syscall %u not found\n", regs->eax);
        current_context->eax = -1; // TODO: return correct error code
        return;
    }
    DEBUG_PRINTF("calling syscall %u\n", regs->eax);

    current_context->eax = syscall_table[regs->eax](regs->eax, regs->ebx, regs->ecx, regs->edx, regs->esi, regs->edi, regs->ebp);
}